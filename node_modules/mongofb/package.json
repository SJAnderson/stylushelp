{
  "author": {
    "name": "Bryant Williams",
    "email": "b.n.williams@gmail.com"
  },
  "dependencies": {
    "asset-wrap": "0.8.x",
    "deepmerge": "0.2.x",
    "express": "3.4.x",
    "firebase": "1.0.x",
    "firebase-token-generator": "0.1.x",
    "jwt-simple": "0.1.x",
    "lru-cache": "2.5.x",
    "mongodb": "1.3.x",
    "node.extend": "1.0.x",
    "request": "2.33.x"
  },
  "description": "Mongo Firebase",
  "main": "./lib/server",
  "name": "mongofb",
  "repository": {
    "type": "git",
    "url": "git://github.com/scien/mongofb.git"
  },
  "version": "0.8.2",
  "readme": "# MongoFB\n\n## Table of Contents\n\n - [General Information](#general-information)\n  - [What is MongoFB](#what-is-mongofb)\n  - [Diagram](#diagram)\n - [Usage](#usage)\n  - [Server Configuration](#server-configuration)\n  - [Server API](#server-api)\n  - [Server Hooks](#server-hooks)\n  - [Authentication](#authentication)\n  - [Client SDK](#client-sdk)\n - [Examples](#examples)\n  - [Server](#server)\n  - [Javascript Client](#javascript-client) \n  - [iOS Client](#ios-client) \n  - [Android Client](#android-client) \n\n## General Information\n\n### What is MongoFB\n\nMongoFB is a combination of MongoDB and Firebase. You can run your MongoDB\nanywhere you like, and sign up for your own Firebase account.  MongoFB\nprovides an API so you can query, index, and aggregate your data (all the\nthings you wish your firebase could do).  MongoFB uses Firebase as its\nmaster source of data, so you get built in Security Rules, Authentication,\nand can listen for updates on any document of any collection, or any field\nof any document (all the things you wish your mongodb would do).\n\n - Firebase\n   - Security/Authentication\n   - WebSockets\n - MongoDB\n   - querying\n   - indexing\n   - aggregation\n\n### Diagram\n![Diagram](http://media.lessthan3.com/wp-content/uploads/2013/07/mongofb.png)\n\n## Usage\n\n### Sever Configuration\n\nMongoFB can be included in your express or zappajs server, using middleware.\n```\nmongofb = require 'mongofb'\n\napp.use mongofb {\n  root: '/api/1'      # the root url to host mongofb on\n  cache:\n    max: 100          # the max number of results to store in a local LRU cache\n    maxAge: 1000*60*5 # the max age of any result in the LRU cache\n  firebase:\n    url: ''           # the url of your firebase\n    secret: ''        # your firebase secret - only needed if your firebase has security rules\n  mongodb:\n    db: 'test'        # the mongodb to connect to\n    host: 'localhost' # the host of your mongodb\n    pass: ''          # the password to connect with\n    port: 27017       # the port to connect to\n    user: 'admin'     # the user to connect with\n    options: {}       # other connection options [ref](#https://github.com/mongodb/node-mongodb-native/blob/master/docs/articles/MongoClient.md#basic-parts-of-the-url)\n}\n```\n\n\n### Server API\n\n/API-ROOT/mongofb.js\n```\nServes the javascript client\n```\n\n/API-ROOT/Firebase\n```\nLet's the client look up the public url of your Firebase\n```\n\n/API-ROOT/ObjectId\n```\nThe client calls here to get a new ObjectID before writing to Firebase\n```\n\n/API-ROOT/sync/:collection/:id\n```\nAfter an insert, update, or remove, a client will tell the server it needs to\nupdate data in Firebase. The server will then pull the most up-to-date data\ndirectly from Firebase and write it to MongoDB for querying.\n```\n\n/API-ROOT/:collection/find\n```\nPerform a db.collection.find on your MongoDB. Pass your query as query\nparameters to this endpoint. The result is returned as an array.\n\nspecial options\n - limit: limits the number of results in the response\n```\n\n/API-ROOT/:collection/findOne\n```\nPerform a db.collection.findOne on your MongoDB. Pass your query as query\nparameters to this endpoint. The result is returned as an object\n```\n\n/API-ROOT/:collection/:id*\n```\nPerform a db.collection.findOne by {_id: ObjectID()} on your MongoDB. Pass your\nquery as query parameters to this endpoint. The result is returned as an object.\n\nThis endpoint functions more like a standard resource url as no query parameters\nare used.  This method also lets you query for specific fields of a document.\n\nexample: /API-ROOT/posts/510b56c221168da296f27bd5/author/name\n\nThe above might be a posts collection for my blog. With this I could directly\naccess the author's name of post 510b56c221168da296f27bd5.\n\nThe corresponding Firebase URL for that data would be\nhttps://my-firebase.firebaseio.com/posts/510b56c221168da296f27bd5/author/name\n```\n\n### Server Hooks\nSometimes you may want to modify the response from your api, or set default\nvalues for parameters, or do something special if the user is authenticated.\nThis is all possible with MongoFB Hooks.\n\nYou can define your hooks in your server configuration. The current hooks\navailable are...\n\nnew_query = collection.before.find(query)\n\nnew_doc = collection.after.find(doc)\n\n\nExample Usage\n```\napp.use mongofb {\n  firebase: config.firebase\n  mongofb: config.mongodb\n  root: '/api/1'\n  hooks:\n    users:\n      after:\n        find: (doc) ->\n          # hide private user information to other users\n          return doc if @user?.auth?.id == doc.id\n          {_id: doc._id, public: doc.public}\n    posts:\n      before:\n        find: (query) ->\n          # an author changed their name\n          if query.author?.name == 'joe'\n            query.author.name = 'joey'\n\n          # if we search for football or baseball, also search all sports\n          if query.tag in ['football', 'baseball']\n            query.tag = [query.tag, 'sports']\n\n          # force a small limit\n          query.limit = 10\n}\n```\n\n### Authentication\nauthenticate any request by passing a token query parameter with the\nvalue being the users' firebase token.\n\nThe @user can then be referenced in your hooks\n\n### Client SDK\nHow to use the Javascript SDK\n\nClasses\n```\nmongofb.Database\nmongofb.Collection\nmongofb.Document\nmongofb.DocumentRef\n```\n\nmongofb.Database\n```\n# This is the equivalent to a MongoDB Database\n\n# Connect to our MongoFB server\ndb = new mongofb.Database 'http://localhost:3000/API-ROOT'\n\n# Get a collection\nposts = db.collection 'posts'\nposts = db.get 'posts' \n\n# Get a document directly\npost = db.collection('posts').get('510b56c221168da296f27bd5')\npost = db.get('posts/510b56c221168da296f27bd5')\npost = db.get('posts.510b56c221168da296f27bd5')\n\n# Get a field from a document directly\nname = db.get('posts/510b56c221168da296f27bd5/author/name')\nname = db.get('posts.510b56c221168da296f27bd5.author.name')\n```\n\nmongofb.Collection\n```\n# This is the equivalent to a MongoDB Collection\n\n# Get a collection\nusers = db.collection 'users'\nusers = db.get 'users'\n\n# Insert a document (this method must be asynchronous)\nusers.insert {foo: 'bar'}, (err, user) ->\n  throw err if err\n  console.log user.val()\n\n# Run a find query (synchronous)\ndocs = users.find {foo: 'bar'}\n\n# Run a find query (asynchronous)\nusers.find {foo: 'bar'}, (err, docs) ->\n  throw err if err\n  console.log docs\n\n# Run a findById (synchronous)\nuser = users.findById '510b56c221168da296f27bd5'\n\n# Run a findById (asynchronous)\nusers.findById '510b56c221168da296f27bd5', (err, user) ->\n  throw err if err\n  console.log user\n\n# Run a findOne (synchronous)\nuser = users.findOne {foo: 'bar'}\n\n# Run a findOne (asynchonous)\nusers.findOne {foo: 'bar'}, (err, user) ->\n  throw err if err\n  console.log user\n\n# Remove a document (this method must be asynchronous)\n# only allowed to remove by id\nusers.remove '510b56c221168da296f27bd5', (err) ->\n  throw err if err\n```\n\nmongofb.Document\n```\n# This is the equivalent of a MongoDB Document\npost = posts.findById '510b56c221168da296f27bd5'\n\n# Update a field in a Document\npost.get('author.name').set('new author')\n\n# update an entire Document\npost.set {author: {name: 'the author'}, content: 'long post'}\n\n# get json for a document\npost.val()\n\n# listeners\npost.on 'update', (val) ->\n  # called when this document is updated\n\npost.on 'value', (val) ->\n  # called immediately, and when the document is updated\n\npost.on 'remove', (val) ->\n  # called when the post is removed from the database\n```\n\nmongofb.DocumentRef\n```\n# A DocumentRef is a reference to a field of a Document\n\n# Get a ref\nref = post.get('author.name')\n\n# add listeners\nref.on 'update', (val) ->\nref.on 'value', (val) ->\n\n# remove listeners\nref.off 'update'\nref.off 'value'\nref.off()\n\n# get the parent ref\nref.parent()\n\n# change the value of this property\nref.set('new author')\n\n# get the json value for this ref\nref.val()\n\n\n```\n\n## Examples\n\n### Server\n```\nexpress = require 'express'\nmongofb = require '../lib/server'\n\napp = express()\napp.use mongofb {\n  firebase:\n    url: 'https://vn42xl9zsez.firebaseio-demo.com/'\n  mongodb:\n    host: 'localhost'\n    port: 27017\n  root: '/api/v2'\n}\napp.get '/', (req, res) ->\n  res.send \"\"\"\n  <html>\n    <body>\n      <script type='text/javascript' src='http://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.2/jquery.min.js'></script>\n      <script type='text/javascript' src='https://cdn.firebase.com/v0/firebase.js'></script>\n      <script type='text/javascript' src='/api/v2/mongofb.js'></script>\n    </body>\n  </html>\n  \"\"\"\n\napp.listen 3000\nconsole.log \"listening: 3000\"\n```\n\n\n### Javascript Client\n```\nwindow.db = new mongofb.Database 'http://localhost:3000/api/v2'\nwindow.cookies = db.collection 'cookies'\n\ncookies.insert {type: 'chocolate'}, (err, cookie) ->\n  throw err if err\n  window.cookie = cookie\n\n  cookie.on 'update', (val) ->\n    console.log 'cookie updated to', val\n\n  ref = cookie.get 'type'\n  ref.on 'update', (val) ->\n    console.log 'cookie.type updated to', val\n\n  ref.set 'peanut butter'\n```\n\n### iOS Client\n```\nComing Soon!\n```\n\n### Android Client\n```\nComing Soon!\n```\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/scien/mongofb/issues"
  },
  "homepage": "https://github.com/scien/mongofb",
  "_id": "mongofb@0.8.2",
  "_from": "mongofb@0.8.x"
}
